<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_ssnbv_symcode_package_version</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_ssnbv_symcode_package_version">require_previousVALCHANGES^EQ<item endquery="false" field="require_previous" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Set previous version requirement</name>
        <order>130</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous) {
	
	// Get previous version
	var gr = new GlideRecord(new SymCodeUtil().TABLE_PACKAGE_VERSION);
	gr.addQuery('package', current['package'].toString());
	gr.addQuery('state', 'released');
	gr.addQuery('sys_id', '!=', current.getUniqueValue());
	gr.orderByDesc('released_on');
	gr.setLimit(1);
	gr.query();
	if (!gr.next()) return;
	
	// Set previous version requirement
	var requirementGr = new GlideRecord(new SymCodeUtil().TABLE_PACKAGE_VERSION_REQUIREMENT);
	requirementGr.addQuery('version', current.getUniqueValue());
	requirementGr.addQuery('requirement', gr.getUniqueValue());
	requirementGr.query();
	if (current.require_previous.toString() == 'true' && !requirementGr.next()) {
		requirementGr.initialize();
		requirementGr.version = current.getUniqueValue();
		requirementGr.requirement = gr.getUniqueValue();
		requirementGr.insert();
	} else if (current.require_previous.toString() == 'false' && requirementGr.next()) {
		requirementGr.deleteMultiple();
	}
	
})(current, previous);
]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>jari.eskelinen@symfoni-esm.com</sys_created_by>
        <sys_created_on>2019-06-05 06:46:38</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>5101e712dbf93700c28c7f1daf96193e</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>Set previous version requirement</sys_name>
        <sys_overrides/>
        <sys_package display_value="SymCode" source="x_ssnbv_symcode">ce1cd729372c3b805144549543990ec5</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="SymCode">ce1cd729372c3b805144549543990ec5</sys_scope>
        <sys_update_name>sys_script_5101e712dbf93700c28c7f1daf96193e</sys_update_name>
        <sys_updated_by>jari.eskelinen@symfoni-esm.com</sys_updated_by>
        <sys_updated_on>2019-06-05 07:08:10</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=5101e712dbf93700c28c7f1daf96193e"/>
</record_update>
